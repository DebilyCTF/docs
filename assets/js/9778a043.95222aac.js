"use strict";(self.webpackChunkweb_ctf=self.webpackChunkweb_ctf||[]).push([[814],{9393:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=n(5893),o=n(1151);const r={},i="Slowest Fastest (500 points)",a={id:"writeups/X-MAS/2020/slowest_fastest",title:"Slowest Fastest (500 points)",description:"Description",source:"@site/docs/writeups/X-MAS/2020/slowest_fastest.md",sourceDirName:"writeups/X-MAS/2020",slug:"/writeups/X-MAS/2020/slowest_fastest",permalink:"/<projectName>/docs/writeups/X-MAS/2020/slowest_fastest",draft:!1,unlisted:!1,editUrl:"https://github.com/boyney123/eventcatalog/edit/master/website/docs/writeups/X-MAS/2020/slowest_fastest.md",tags:[],version:"current",lastUpdatedBy:"kostezy",frontMatter:{},sidebar:"writeups",previous:{title:"Santa's consolation (500 points)",permalink:"/<projectName>/docs/writeups/X-MAS/2020/santas_consolation"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Solution",id:"solution",level:2}];function d(t){const e=Object.assign({h1:"h1",h2:"h2",p:"p",pre:"pre",code:"code"},(0,o.ah)(),t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"slowest-fastest-500-points",children:"Slowest Fastest (500 points)"}),"\n",(0,s.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(e.p,{children:"This is an emergency, we need you to help us organize our gift building process. We're in a hurry so let's go!"}),"\n",(0,s.jsx)(e.p,{children:"Target: nc challs.xmas.htsp.ro 6055"}),"\n",(0,s.jsx)(e.p,{children:"Authors: Gabies, Nutu"}),"\n",(0,s.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-shell",children:"$ nc challs.xmas.htsp.ro 6055\nHey, we've got a problem at the factory! As you well know we have N rooms in our factory, and in the i-th room we have v[i] gifts that have to be built.\nAlso, at the factory we have N mechagnomes of two possible types:\n\tK of them are the Fast-O-Bot type, which can build P gifts in a single day\n\tThe rest of N - K bots are the Speed-O-Tron type which can build Q gifts in a single day.\n\nEach day a mechagnome is assigned to a room, and that day it'll work all by itself in that room, building as many gifts as it can.\nIf there are no gifts to be built or he finishes all of them before the end of the day, the mechagnome goes idle. There cannot be two mechagnomes in the same room in the same day.\nSince we're in a hurry, we need the minimum number of days we can build all gifts. Can you help us?\nJust to be safe, we have to solve 100 such scenarios. We don't want to waste any time so we'll give you 60 seconds to solve everything.\nAh, and since our connection is so slow, we'll define v in the following way: v[i] = (a * v[i - 1] + c) % mod for all i = 2, n\n\nTest number: 1/100\nN = 8, K = 1\nP = 181, Q = 211\nv[1] = 16138, a = 95563, c = 36925, mod = 100001\n"})}),"\n",(0,s.jsx)(e.p,{children:"When I saw the flag, I realized that my decision was not as what was supposed to be. At first I wrote a fairly clever algorithm (which turned out to be untrue), but every time some task failed, and the algorithm was honestly slow. Then I decided to write some straight forward code, which I optimized a little in order to have time to pass 100 tests in a minute, and, to my surprise, it worked. Here's my garbage code:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from pwn import *\nimport numpy as np\nimport math\n\ndef filter_nonzero(arr, k):\n    return arr[np.nonzero(arr > k)]\n\nconn = remote('challs.xmas.htsp.ro', 6055)\nconn.recvuntil(\"Test number: 1/100\\n\")\n\nfor task in range(100):\n    NandKrecieved = conn.recvline().decode('utf-8').strip().split(', ')\n    NandK = list(map(lambda x: int(x[4:]), NandKrecieved))\n    N = NandK[0]\n    K = NandK[1]\n\n    PandQrecieved = conn.recvline().decode('utf-8').strip().split(', ')\n    PandQ = list(map(lambda x: int(x[4:]), PandQrecieved))\n    P = PandQ[0]\n    Q = PandQ[1]\n\n    def mapVitems(x):\n        res = x[4:]\n        if (x[0:1] == \"v\"):\n            res = x[7:]\n        elif (x[0:1] == \"m\"):\n            res = x[6:]\n        return int(res)\n    vItemsRecieved = conn.recvline().decode('utf-8').strip().split(', ')\n    vItems = list(map(mapVitems, vItemsRecieved))\n    v1 = vItems[0]\n    a = vItems[1]\n    c = vItems[2]\n    mod = vItems[3]\n\n    fast_o_bots = K\n    speed_o_trons = N - K\n\n    if (P >= Q):\n        bots = {\n            'fastBots': {'amount': fast_o_bots, 'giftsPerDay': P},\n            'slowBots': {'amount': speed_o_trons, 'giftsPerDay': Q}\n        }\n    else:\n        bots = {\n            'fastBots': {'amount': speed_o_trons, 'giftsPerDay': Q},\n            'slowBots': {'amount': fast_o_bots, 'giftsPerDay': P}\n        }\n\n    roomsGifts = [v1]\n    for x in range(1,N):\n        giftsForRoom = (a * roomsGifts[-1] + c) % mod\n        roomsGifts.append(giftsForRoom)\n            \n    roomsGifts = -np.sort(-np.array(roomsGifts))\n\n    def work(roomsGifts, bots, counter, iteration):\n        fastBotsAmount = bots[\"fastBots\"][\"amount\"]\n        fastBotsGifts = bots[\"fastBots\"][\"giftsPerDay\"]\n        slowBotsGifts = bots[\"slowBots\"][\"giftsPerDay\"]\n\n        firstPart = roomsGifts[:fastBotsAmount]\n        secondPart = roomsGifts[fastBotsAmount:]\n\n        currentCounter = counter + 1\n        if (iteration < 17):\n            firstItem = roomsGifts[0]\n            mult = math.floor(firstItem / fastBotsGifts)\n            mult = math.floor(mult / 3)\n            a = np.subtract(firstPart, fastBotsGifts * mult)\n            b = np.subtract(secondPart, slowBotsGifts * mult)\n\n            currentCounter = counter + mult\n        else:\n            a = np.subtract(firstPart, fastBotsGifts)\n            b = np.subtract(secondPart, slowBotsGifts)\n\n        temp = np.concatenate([a, b])\n        leftGifts = filter_nonzero(temp, 0)\n        \n        if (len(leftGifts) == 0):\n            return counter\n\n        leftGifts = -np.sort(-leftGifts)\n\n        return work(leftGifts, bots, currentCounter, iteration + 1)\n\n    \n    totalCounter = work(roomsGifts, bots, 1, 0)\n\n    conn.sendline(str(totalCounter))\n    conn.recvline()\n    print(conn.recvline())\n    print(conn.recvline())\n\nconn.interactive()\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-shell",children:"[*] Switching to interactive mode\nThanks for saving Christmas this year!\nHere's the flag: X-MAS{l0l_h0w_15_7h1s_4_b1n4ry_s34rch_pr0bl3m?}\n[*] Got EOF while reading in interactive\n"})}),"\n",(0,s.jsx)(e.p,{children:"Flag: X-MAS{l0l_h0w_15_7h1s_4_b1n4ry_s34rch_pr0bl3m?}"})]})}const f=function(t={}){const{wrapper:e}=Object.assign({},(0,o.ah)(),t.components);return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(d,t)})):d(t)}},1151:(t,e,n)=>{n.d(e,{Zo:()=>a,ah:()=>r});var s=n(7294);const o=s.createContext({});function r(t){const e=s.useContext(o);return s.useMemo((()=>"function"==typeof t?t(e):{...e,...t}),[e,t])}const i={};function a({components:t,children:e,disableParentContext:n}){let a;return a=n?"function"==typeof t?t({}):t||i:r(t),s.createElement(o.Provider,{value:a},e)}}}]);