"use strict";(self.webpackChunkweb_ctf=self.webpackChunkweb_ctf||[]).push([[715],{9888:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>x,toc:()=>l});var t=r(5893),s=r(1151);const a={},i="Key generator (300 points)",x={id:"writeups/Syskron/2020/key_generator",title:"Key generator (300 points)",description:"Description",source:"@site/docs/writeups/Syskron/2020/key_generator.md",sourceDirName:"writeups/Syskron/2020",slug:"/writeups/Syskron/2020/key_generator",permalink:"/ctf-docs/docs/writeups/Syskron/2020/key_generator",draft:!1,unlisted:!1,editUrl:"https://github.com/boyney123/eventcatalog/edit/master/website/docs/writeups/Syskron/2020/key_generator.md",tags:[],version:"current",lastUpdatedBy:"kostezy",frontMatter:{},sidebar:"writeups",previous:{title:"HID (300 points)",permalink:"/ctf-docs/docs/writeups/Syskron/2020/HID"},next:{title:"Ladder password (100 points)",permalink:"/ctf-docs/docs/writeups/Syskron/2020/ladder_password"}},o={},l=[{value:"Description",id:"description",level:2},{value:"Solution",id:"solution",level:2}];function d(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",a:"a",pre:"pre",code:"code",img:"img",strong:"strong"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"key-generator-300-points",children:"Key generator (300 points)"}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"This is our official key generator that we use to derive keys from machine numbers. Our developer put a secret in its code. Can you find it?"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{target:"_blank",href:r(1368).Z+"",children:"Attached file"})}),"\n",(0,t.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,t.jsx)(n.p,{children:"This is my second stf where I decided to do tasks related to reverse engineering. First of all, we check the file type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ file keygen\nkeygen: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7d6f8eb010acea04bfdcbeef39b6fa8df52ec9bf, for GNU/Linux 3.2.0, not stripped\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now let's start decompiling with ",(0,t.jsx)(n.a,{href:"https://ghidra-sre.org/InstallationGuide.html",children:"ghidra"})," and open main function:\n",(0,t.jsx)(n.img,{src:r(6407).Z+"",width:"696",height:"609"})]}),"\n",(0,t.jsxs)(n.p,{children:["Machine number should be 7 characters long. Now I need to open the function that generates the serial number:\n",(0,t.jsx)(n.img,{src:r(147).Z+"",width:"467",height:"655"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can see that __s2 is a reversed string (14 line, function ",(0,t.jsx)(n.strong,{children:"strrev"}),") that is located in memory. Then our input is compared with __s2 (15 line, function ",(0,t.jsx)(n.strong,{children:"strcmp"}),"), and if the reversed line from memory and our input are equal, we go to the next function octal which in turn generates the key we need."]}),"\n",(0,t.jsxs)(n.p,{children:["It's time to start using the ",(0,t.jsx)(n.a,{href:"https://github.com/longld/peda",children:(0,t.jsx)(n.strong,{children:"gdb-peda"})})," utility to run the file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"$ gdb ./keygen\n"})}),"\n",(0,t.jsxs)(n.p,{children:["First of all I need to load all the functions by running the program (type ",(0,t.jsx)(n.strong,{children:"r"}),"). Now let's disasemble genserial function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"gdb-peda$ disas genserial\nDump of assembler code for function genserial:\n   0x00005555555552d8 <+0>:     push   rbp\n   0x00005555555552d9 <+1>:     mov    rbp,rsp\n   0x00005555555552dc <+4>:     sub    rsp,0x30\n   0x00005555555552e0 <+8>:     mov    QWORD PTR [rbp-0x28],rdi\n   0x00005555555552e4 <+12>:    mov    rax,QWORD PTR fs:0x28\n   0x00005555555552ed <+21>:    mov    QWORD PTR [rbp-0x8],rax\n   0x00005555555552f1 <+25>:    xor    eax,eax\n   0x00005555555552f3 <+27>:    movabs rax,0x6c61736b612121\n   0x00005555555552fd <+37>:    mov    QWORD PTR [rbp-0x10],rax\n   0x0000555555555301 <+41>:    lea    rax,[rbp-0x10]\n   0x0000555555555305 <+45>:    mov    rdi,rax\n   0x0000555555555308 <+48>:    call   0x555555555199 <strrev>\n   0x000055555555530d <+53>:    mov    rdx,rax\n   0x0000555555555310 <+56>:    mov    rax,QWORD PTR [rbp-0x28]\n   0x0000555555555314 <+60>:    mov    rsi,rdx\n   0x0000555555555317 <+63>:    mov    rdi,rax\n   0x000055555555531a <+66>:    call   0x555555555080 <strcmp@plt>\n   0x000055555555531f <+71>:    test   eax,eax\n   0x0000555555555321 <+73>:    je     0x55555555538c <genserial+180>\n   0x0000555555555323 <+75>:    mov    rax,QWORD PTR [rbp-0x28]\n   0x0000555555555327 <+79>:    mov    rsi,rax\n   0x000055555555532a <+82>:    lea    rdi,[rip+0xf37]        # 0x555555556268\n   0x0000555555555331 <+89>:    mov    eax,0x0\n   0x0000555555555336 <+94>:    call   0x555555555070 <printf@plt>\n   0x000055555555533b <+99>:    mov    DWORD PTR [rbp-0x14],0x6\n   0x0000555555555342 <+106>:   jmp    0x555555555378 <genserial+160>\n   0x0000555555555344 <+108>:   mov    eax,DWORD PTR [rbp-0x14]\n   0x0000555555555347 <+111>:   movsxd rdx,eax\n   0x000055555555534a <+114>:   mov    rax,QWORD PTR [rbp-0x28]\n   0x000055555555534e <+118>:   add    rax,rdx\n   0x0000555555555351 <+121>:   movzx  eax,BYTE PTR [rax]\n   0x0000555555555354 <+124>:   movsx  eax,al\n   0x0000555555555357 <+127>:   mov    edi,eax\n   0x0000555555555359 <+129>:   call   0x555555555030 <toupper@plt>\n   0x000055555555535e <+134>:   sub    eax,DWORD PTR [rbp-0x14]\n   0x0000555555555361 <+137>:   mov    esi,eax\n   0x0000555555555363 <+139>:   lea    rdi,[rip+0xcb6]        # 0x555555556020\n   0x000055555555536a <+146>:   mov    eax,0x0\n   0x000055555555536f <+151>:   call   0x555555555070 <printf@plt>\n   0x0000555555555374 <+156>:   sub    DWORD PTR [rbp-0x14],0x1\n   0x0000555555555378 <+160>:   cmp    DWORD PTR [rbp-0x14],0x0\n   0x000055555555537c <+164>:   jns    0x555555555344 <genserial+108>\n   0x000055555555537e <+166>:   lea    rdi,[rip+0xef0]        # 0x555555556275\n   0x0000555555555385 <+173>:   call   0x555555555040 <puts@plt>\n   0x000055555555538a <+178>:   jmp    0x555555555396 <genserial+190>\n   0x000055555555538c <+180>:   mov    eax,0x0\n   0x0000555555555391 <+185>:   call   0x55555555523e <octal>\n   0x0000555555555396 <+190>:   nop\n   0x0000555555555397 <+191>:   mov    rax,QWORD PTR [rbp-0x8]\n   0x000055555555539b <+195>:   sub    rax,QWORD PTR fs:0x28\n   0x00005555555553a4 <+204>:   je     0x5555555553ab <genserial+211>\n   0x00005555555553a6 <+206>:   call   0x555555555060 <__stack_chk_fail@plt>\n   0x00005555555553ab <+211>:   leave\n   0x00005555555553ac <+212>:   ret\nEnd of assembler dump.\n"})}),"\n",(0,t.jsx)(n.p,{children:"I need to place breakpoint at first printf function according to the decompiled genserial code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"gdb-peda$ b *0x0000555555555336\nBreakpoint 1 at 0x555555555336\n"})}),"\n",(0,t.jsx)(n.p,{children:"Let's run the program again"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"gdb-peda$ r\nStarting program: /mnt/d/Downloads/keygen\n/********************************************************************************\n* Copyright (C) BB Industry a.s. - All Rights Reserved\n* Unauthorized copying of this file, via any medium is strictly prohibited\n* Proprietary and confidential\n* Written by Marie Tesa\u0159ov\xe1 <m.tesarova@bb-industry.cz>, April 2011\n********************************************************************************/\n\nEnter machine number (e.g. B999999): 9999999\n[----------------------------------registers-----------------------------------]\nRAX: 0x0\nRBX: 0x555555555490 (<__libc_csu_init>: endbr64)\nRCX: 0xffff01ff\nRDX: 0x6c ('l')\nRSI: 0x7fffffffe520 --\x3e 0x39393939393939 ('9999999')\nRDI: 0x555555556268 (\"Key for %s: \")\nRBP: 0x7fffffffe510 --\x3e 0x7fffffffe530 --\x3e 0x0\nRSP: 0x7fffffffe4e0 --\x3e 0x5555555563d0 ('*' <repeats 80 times>, \"/\\n\")\nRIP: 0x555555555336 (<genserial+94>:    call   0x555555555070 <printf@plt>)\nR8 : 0x39 ('9')\nR9 : 0x7c ('|')\nR10: 0x5555555544ab --\x3e 0x5f00706d63727473 ('strcmp')\nR11: 0x7ffff7f49b60 (<__strcmp_avx2>:   endbr64)\nR12: 0x5555555550a0 (<_start>:  endbr64)\nR13: 0x7fffffffe620 --\x3e 0x1\nR14: 0x0\nR15: 0x0\nEFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x555555555327 <genserial+79>:       mov    rsi,rax\n   0x55555555532a <genserial+82>:       lea    rdi,[rip+0xf37]        # 0x555555556268\n   0x555555555331 <genserial+89>:       mov    eax,0x0\n=> 0x555555555336 <genserial+94>:       call   0x555555555070 <printf@plt>\n   0x55555555533b <genserial+99>:       mov    DWORD PTR [rbp-0x14],0x6\n   0x555555555342 <genserial+106>:      jmp    0x555555555378 <genserial+160>\n   0x555555555344 <genserial+108>:      mov    eax,DWORD PTR [rbp-0x14]\n   0x555555555347 <genserial+111>:      movsxd rdx,eax\nGuessed arguments:\narg[0]: 0x555555556268 (\"Key for %s: \")\narg[1]: 0x7fffffffe520 --\x3e 0x39393939393939 ('9999999')\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffe4e0 --\x3e 0x5555555563d0 ('*' <repeats 80 times>, \"/\\n\")\n0008| 0x7fffffffe4e8 --\x3e 0x7fffffffe520 --\x3e 0x39393939393939 ('9999999')\n0016| 0x7fffffffe4f0 --\x3e 0x555555555490 (<__libc_csu_init>:     endbr64)\n0024| 0x7fffffffe4f8 --\x3e 0x7fffffffe530 --\x3e 0x0\n0032| 0x7fffffffe500 --\x3e 0x2121616b73616c ('laska!!')\n0040| 0x7fffffffe508 --\x3e 0xc206183b2e7f5500\n0048| 0x7fffffffe510 --\x3e 0x7fffffffe530 --\x3e 0x0\n0056| 0x7fffffffe518 --\x3e 0x555555555466 (<main+185>:    mov    eax,0x0)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 1, 0x0000555555555336 in genserial ()\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"0032| 0x7fffffffe500 --\x3e 0x2121616b73616c ('laska!!')"})," What is it? Let's try ",(0,t.jsx)(n.strong,{children:"laska!!"})," as a machine number"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"gdb-peda$ r\nStarting program: /mnt/d/Downloads/keygen\n/********************************************************************************\n* Copyright (C) BB Industry a.s. - All Rights Reserved\n* Unauthorized copying of this file, via any medium is strictly prohibited\n* Proprietary and confidential\n* Written by Marie Tesa\u0159ov\xe1 <m.tesarova@bb-industry.cz>, April 2011\n********************************************************************************/\n\nEnter machine number (e.g. B999999): laska!!\n1639171916391539162915791569103912491069173967911091119123955915191639156967955916396391439125916296395591439609104911191169719175\nYou are not done yet! \u0ca0\u203f\u0ca0\n[Inferior 1 (process 224) exited normally]\nWarning: not running\n"})}),"\n",(0,t.jsx)(n.p,{children:"I got a long number and a phrase that is not all. At this point, I absolutely did not know what to do with this number, and spent about 6 hours trying different combinations on a cyberchef. I decided to open a hint and this is what it looked like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Hint\n\n0\u20137\n"})}),"\n",(0,t.jsx)(n.p,{children:"This tip didn't give me anything, but my teammate solved the problem by replacing each 9 with space (0-7 meant an octal). As a result, the line became like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"163 171 163 153 162 157 156 103 124 106 173 67 110 111 123 55 151 163 156 67 55 163 63 143 125 162 63 55 143 60 104 111 116 71 175\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We put this line in the ",(0,t.jsx)(n.a,{href:"http://icyberchef.com/",children:"cyberchef"}),", use the magic method and look for \"CTF\". Method From_Octal('Space') gives us flag."]}),"\n",(0,t.jsx)(n.p,{children:"Flag syskronCTF{7HIS-isn7-s3cUr3-c0DIN9}"})]})}const f=function(e={}){const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}},1368:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/files/keygen-5e43200a506e549b54231aa2281e6fdd.elf"},6407:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/GMXI6_rkyIE-4bd4918afd21c5a84511cb482d75f332.jpg"},147:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/VMRE1UZUG3k-255f11b91d7b52c0de431ec5561050ee.jpg"},1151:(e,n,r)=>{r.d(n,{Zo:()=>x,ah:()=>a});var t=r(7294);const s=t.createContext({});function a(e){const n=t.useContext(s);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function x({components:e,children:n,disableParentContext:r}){let x;return x=r?"function"==typeof e?e({}):e||i:a(e),t.createElement(s.Provider,{value:x},n)}}}]);